// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TenderSystem {
    address public owner;
    
    struct Tender {
        uint id;
        string name;
        string contractTitle;
        string description;
        string startDate;
        string endDate;
        bool active;
        uint winningContractorId;
    }
    
    struct Contractor {
        uint id;
        string name;
        string companyName;
        string contactNumber;
        uint bid;
    }
    
    mapping(uint => Tender[]) public tenders;
    mapping(uint => Contractor[]) public contractors;
    uint public tenderCounter;
    uint public contractorCounter;
    
    event TenderCreated(uint id, string name, string contractTitle, string description, string startDate, string endDate);
    event BidPlaced(uint tenderId, uint bidderId, uint bid);
    event ContractAssigned(uint tenderId, uint contractorId, uint bid);
    
    constructor() {
        owner = msg.sender;
    }
    
   
    
    function createTender(string memory _name, string memory _contractTitle, string memory _description, string memory _startDate, string memory _endDate) public returns (uint , string memory, string memory, string memory, string memory, string memory) {
       
        tenders[tenderCounter].push(Tender(tenderCounter, _name, _contractTitle, _description, _startDate, _endDate, true, 0));
       
        return (tenderCounter++, _name, _contractTitle, _description, _startDate, _endDate);
    }
    
    function placeBid(uint _tenderId, string memory _name, string memory _companyName, string memory _contactNumber, uint _bid) public { 
        contractors[_tenderId].push(Contractor(contractorCounter++, _name, _companyName, _contactNumber, _bid));
        emit BidPlaced(_tenderId, contractorCounter - 1, _bid);
    }
    
    function assignContract(uint _tenderId) public{
        
        uint highestBid = 0;
        uint winningContractor;
        
        for (uint i = 0; i < contractors[_tenderId].length; i++) {
            if (contractors[_tenderId][i].bid > highestBid) {
                highestBid = contractors[_tenderId][i].bid;
                winningContractor = contractors[_tenderId][i].id;
            }
        }
        
        tenders[_tenderId][tenderCounter-1].active = false;
        tenders[_tenderId][tenderCounter-1].winningContractorId = winningContractor;
        emit ContractAssigned(_tenderId, winningContractor, highestBid);
    }
    
    function getTendersForId(uint _tenderId) public view returns (Tender[] memory) {
    return tenders[_tenderId];
}


    function getContractorsForTender(uint _tenderId) public view returns (Contractor[] memory) {
        return contractors[_tenderId];
    }
}
